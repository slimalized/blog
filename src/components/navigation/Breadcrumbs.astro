---
import type { Props } from "../../pages/_pages.astro";

interface Breadcrumb {
    href: string;
    title: string;
}

const { pathname: _pathname, origin } = Astro.url;
const { title: contentTitle, type } = Astro.props as Pick<
    Props,
    "title" | "type"
>;

const footerTitleMapping = {
    "/": "ホーム",
    "/posts": "書いたもの",
    "/works": "作ったもの",
};

const pathSegments = _pathname.split("/").filter(Boolean);
const breadcrumbs: Breadcrumb[] = [];

// Add route.
breadcrumbs.push({
    href: origin,
    title: footerTitleMapping["/"],
});

// Add breadcrumb per segment.
let currentPath = "";
for (const [i, segment] of pathSegments.entries()) {
    currentPath += `/${segment}`;
    const href = origin + currentPath;
    const isLast = i === pathSegments.length - 1;
    breadcrumbs.push({
        href,
        title: isLast
            ? (contentTitle ?? segment)
            : (footerTitleMapping[
                  currentPath as keyof typeof footerTitleMapping
              ] ?? segment),
    });
}
---

<nav>
    <ul>
        {
            type !== "home" &&
                breadcrumbs.map((breadcrumb, index) => (
                    <li>
                        {index > 0 && <span class="separator">/</span>}
                        {index !== breadcrumbs.length - 1 ? (
                            <a href={breadcrumb.href}>{breadcrumb.title}</a>
                        ) : (
                            <span>{breadcrumb.title}</span>
                        )}
                    </li>
                ))
        }
    </ul>
</nav>

<style>
    nav {
        display: grid;
        place-items: center;
        width: 100%;

        .separator:is(li:not(:first-of-type) > *) {
            min-width: max-content;
            margin-inline-end: var(--space-s);
            color: var(--gray-a6);
        }
    }

    a,
    span {
        margin-block: var(--space-xs);
        overflow: hidden;
        text-overflow: ellipsis;
        font-size: var(--font-size-m);
        color: inherit;
        white-space: nowrap;
    }

    @media (hover: hover) {
        a:hover {
            color: var(--color-primary-text-h);
        }
    }

    ul {
        display: inline-flex;
        column-gap: var(--space-s);
        width: calc(var(--width-footer));

        /* padding-inline: min(4vw, var(--space-l)); */
        padding-inline-start: 0;
        margin-top: 0;
    }

    li {
        display: flex;
        width: max-content;
        color: var(--color-primary-text-l);
        marker: none;
    }

    li:last-of-type {
        min-width: 0;
        color: inherit;
    }
</style>
