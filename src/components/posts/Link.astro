---
import { Earth, SquareArrowOutUpRight } from "lucide-react";
import type { LinkProps } from "../../utils/remark/linkCard";

const { type, href, id, title, hostname, description, faviconUrlString } =
    Astro.props as LinkProps;

const isLinkCard = type === "linkCard";
const isFootnoteLink = !isLinkCard && href.startsWith("#") && id === undefined;
const isFootnoteRef = !isLinkCard && href.startsWith("#") && id !== undefined;
---

{
    // normal link
    !isLinkCard && !isFootnoteLink && !isFootnoteRef && (
        <a href={href} target="_blank" rel="noopener noreferrer">
            <slot />
        </a>
    )
}

{
    // footnote link
    isFootnoteLink && (
        <a href={href}>
            <slot />
        </a>
    )
}

{
    // footnote ref
    isFootnoteRef && (
        <a id={id} href={href}>
            <slot />
        </a>
    )
}

{
    // link card
    isLinkCard && (
        <a
            class="link-card"
            href={href}
            target="_blank"
            rel="noopener noreferrer"
        >
            <div>
                {faviconUrlString ? (
                    <img
                        src={faviconUrlString}
                        width="16"
                        height="16"
                        alt={`favicon of ${hostname}`}
                        loading="lazy"
                    />
                ) : (
                    <Earth />
                )}
                {/* for background */}
                {faviconUrlString ? (
                    <img
                        src={faviconUrlString}
                        width="16"
                        height="16"
                        alt={`favicon of ${hostname}`}
                        loading="lazy"
                    />
                ) : (
                    <Earth />
                )}
            </div>
            <div>
                <span>{title}</span>
                <span>{description ? description : hostname}</span>
            </div>
            <SquareArrowOutUpRight />
        </a>
    )
}

<style>
    a.link-card {
        display: flex;
        column-gap: 1rem;
        align-items: center;
        width: 100%;
        height: max-content;
        padding-inline-end: 0.8rem;
        margin-block-start: var(--space-l);
        overflow: hidden;
        color: inherit;
        text-decoration: none;
        background-color: var(--color-primary-background-layer-l);
        border: solid 1px var(--color-primary-outline-l);
        border-radius: var(--border-radius-m);
        box-shadow: var(--box-shadow-s);
    }

    :is(img, svg) {
        --size: 1rem;

        width: var(--size);
        min-width: var(--size);
        height: var(--size);
        min-height: var(--size);
        user-select: none;
        transition: translate ease-out 300ms;
    }

    div:is(a.link-card > *):first-of-type {
        display: flex;
        column-gap: 8px;
        align-items: center;
        height: 100%;
        padding: 1.6rem 0.8rem;
        overflow: hidden;
        border-inline-end: inherit;

        :is(img, svg):nth-of-type(1) {
            --size: 4rem;

            position: absolute;
            inset: -100%;
            margin: auto;
            filter: blur(var(--size));
        }
    }

    div:is(a.link-card > *):nth-of-type(2) {
        display: flex;
        flex-direction: column;
        width: calc(100% - 6rem);

        span {
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        }

        span:first-of-type {
            font-size: var(--font-size-s);
        }

        span:not(:first-of-type) {
            font-size: var(--font-size-xs);
            opacity: 0.75;
        }
    }
</style>
