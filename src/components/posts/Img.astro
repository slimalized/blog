---
import sharp from "sharp";
import { imageSizes } from "../../utils/scripts/mediaConverter";

interface Props {
    alt: string;
    src: string;
}

const { alt, src: _src } = Astro.props;

const extRegex = /\.(avif|svg)$/;

const src = {
    original: _src,
    small: _src.replace(extRegex, "_small.$1"),
    large: _src.replace(extRegex, "_large.$1"),
};

const res = await fetch(src.original);
const buffer = Buffer.from(await res.arrayBuffer());
const metadata = await sharp(buffer).metadata();
const isSvg = metadata.format === "svg";
const { width: originalWidth, height: originalHeight } = metadata;
const isValid = originalWidth !== undefined && originalHeight !== undefined;
const smallWidth = isValid
    ? Math.min(imageSizes.small, originalWidth)
    : undefined;
const largeWidth = isValid
    ? Math.min(imageSizes.large, originalWidth)
    : undefined;
---

{
    !isValid ? (
        <p>
            failed to load <code>{src.original}</code>
        </p>
    ) : isSvg ? (
        <figure>
            <a href={src.original} target="_blank" rel="noopener noreferrer">
                <img
                    class="is-svg"
                    src={src.original}
                    alt={alt}
                    loading="lazy"
                />
            </a>
            <figcaption>{alt}</figcaption>
        </figure>
    ) : (
        <figure>
            <picture>
                {/* small */}
                <source
                    media={`(max-width: ${imageSizes.small}px`}
                    srcset={
                        imageSizes.small >= originalWidth
                            ? src.original
                            : src.small
                    }
                    width={smallWidth}
                    height={Math.floor(
                        ((smallWidth as number) * originalHeight) /
                            originalWidth,
                    )}
                />
                {/* large */}
                <a
                    href={src.original}
                    target="_blank"
                    rel="noopener noreferrer"
                >
                    <img
                        src={
                            imageSizes.large >= originalWidth
                                ? src.original
                                : src.large
                        }
                        alt={alt}
                        width={largeWidth}
                        height={Math.floor(
                            ((largeWidth as number) * originalHeight) /
                                originalWidth,
                        )}
                        loading="lazy"
                    />
                </a>
            </picture>
            <figcaption>{alt}</figcaption>
        </figure>
    )
}

<style>
    figure:has(picture, img) {
        display: grid;
        row-gap: var(--space-xs);
        place-items: center;
        margin-block-start: var(--space-xl);
    }

    figcaption:is(:is(picture, img) + *) {
        padding-block-start: var(--space-xs);
        font-size: var(--font-size-s);
        line-height: var(--line-height-jp-s);
    }

    img:is(a > *) {
        width: 100%;
        max-width: 100%;
        height: auto;

        &:not(.is-svg) {
            border: solid 1px var(--color-secondary-outline-la);
            border-radius: var(--border-radius-l);
            box-shadow: var(--box-shadow-s);
        }
    }
</style>
