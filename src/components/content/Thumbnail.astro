---
import { Image } from "lucide-react";
import type { worksCategories } from "../../content.config";
import { site } from "../../utils/consts";
import OptimizedImage from "./OptimizedImage.astro";

interface Props {
    alt?: string;
    src?: string;
    category?: (typeof worksCategories)[number];
}

const { alt = site.author, src, category } = Astro.props;

const isLocal = src?.startsWith("/media/");
const hasSvg = src?.endsWith(".svg");
const isWorks = category !== undefined;
---

<figure
    class={`${hasSvg && "has-svg"} ${isWorks && "is-works"} thumbnail ${category}`}
>
    {
        !src ? (
            <Image className="fallback-image" size={48} />
        ) : isLocal ? (
            <img src={src} alt={alt} loading="eager" />
        ) : (
            <OptimizedImage
                src={src}
                alt={alt}
                loading="eager"
                linkable={false}
            />
        )
    }
    {
        isWorks && (
            <span class={`category-badge ${category}`}>
                {category.toUpperCase()}
            </span>
        )
    }
</figure>

<style>
    :global(.fallback-image) {
        color: var(--beige-8);
    }

    figure.thumbnail:has(picture, img, svg) {
        display: grid;
        row-gap: var(--space-xs);
        place-items: center;
        width: 100%;
        height: calc(8rem + var(--space-xl) * 2);
        padding-inline: var(--space-l);
        overflow: hidden;
        background-color: var(--color-primary-background-layer-h);
        border-radius: var(--border-radius-m);
    }

    .category-badge {
        position: absolute;
        right: 0;
        bottom: 0;
        display: grid;
        place-items: center;
        padding: var(--space-s);
        margin: 8px;
        font-family: var(--font-mono);
        font-size: var(--font-size-xs);
        line-height: 0;
        text-align: end;
        letter-spacing: 1px;
        border-radius: var(--border-radius-pill);

        &.tech {
            color: var(--blue-11);
            background-color: var(--blue-4);
        }

        &.design {
            color: var(--yellow-11);
            background-color: var(--yellow-4);
        }
    }

    :global(:root[data-theme="dark"] img:is(figure.thumbnail *)) {
        opacity: 0.85;
    }

    :global(img:is(figure.thumbnail:not(.has-svg) *)) {
        max-height: 8rem;
        border: solid min(0.8vw, 5px)
            light-dark(var(--beige-1), var(--beige-12));
        border-radius: 0;
        box-shadow: var(--box-shadow-m);
    }

    :global(img:is(figure.thumbnail.is-works:not(.has-svg) *)) {
        max-height: 8rem;
        border: none;
        border-radius: 0;
        box-shadow: none;
        filter: drop-shadow(0 2px 3px rgb(0 0 0 / 16%));
    }

    :global(img:is(figure.thumbnail.has-svg *)) {
        max-width: 4rem;
        max-height: 8rem;
        filter: drop-shadow(0 2px 3px rgb(0 0 0 / 16%));
    }
</style>
